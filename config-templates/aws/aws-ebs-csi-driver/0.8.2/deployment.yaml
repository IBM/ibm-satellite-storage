---
apiVersion: v1
kind: List
metadata:
  name: aws-ebs-csi-driver
  namespace: kube-system
  annotations:
    version: 0.8.2
items:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: aws-secret
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    data:
      key_id:  "{{{ aws-access-key }}}"
      access_key:  "{{{ aws-secret-access-key }}}"
  - apiVersion: storage.k8s.io/v1beta1
    kind: CSIDriver
    metadata:
      name: ebs.csi.aws.com
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    spec:
      attachRequired: true
      podInfoOnMount: false
  - kind: StorageClass
    apiVersion: storage.k8s.io/v1
    metadata:
      name: sat-aws-block-gold
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    provisioner: ebs.csi.aws.com
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true
    parameters:
      csi.storage.k8s.io/fstype: ext4
      type: io2
      iopsPerGB: "{{ iops-per-gb }}"
      encrypted: "true"
  - kind: StorageClass
    apiVersion: storage.k8s.io/v1
    metadata:
      name: sat-aws-block-silver
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    provisioner: ebs.csi.aws.com
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true
    parameters:
      csi.storage.k8s.io/fstype: ext4
      type: gp3
      encrypted: "true"
  - kind: StorageClass
    apiVersion: storage.k8s.io/v1
    metadata:
      name: sat-aws-block-bronze
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    provisioner: ebs.csi.aws.com
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true
    parameters:
      csi.storage.k8s.io/fstype: ext4
      type: st1
      encrypted: "true"
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ebs-csi-controller-sa
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
  #{{#enable-volume-snapshot}}
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ebs-snapshot-controller
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
  #{{/enable-volume-snapshot}}
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-external-attacher-role
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "update", "patch"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["csi.storage.k8s.io"]
        resources: ["csinodeinfos"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["volumeattachments"]
        verbs: ["get", "list", "watch", "update", "patch"]
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-external-provisioner-role
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshots"]
        verbs: ["get", "list"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotcontents"]
        verbs: ["get", "list"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["csinodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["get", "watch", "list", "delete", "update", "create"]
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-csi-attacher-binding
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-csi-controller-sa
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: ebs-external-attacher-role
      apiGroup: rbac.authorization.k8s.io
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-csi-provisioner-binding
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-csi-controller-sa
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: ebs-external-provisioner-role
      apiGroup: rbac.authorization.k8s.io
  #{{#enable-volume-resizing}}
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-external-resizer-role
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      # The following rule should be uncommented for plugins that require secrets
      # for provisioning.
      # - apiGroups: [""]
      #   resources: ["secrets"]
      #   verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "update", "patch"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims/status"]
        verbs: ["update", "patch"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-csi-resizer-binding
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-csi-controller-sa
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: ebs-external-resizer-role
      apiGroup: rbac.authorization.k8s.io
  #{{/enable-volume-resizing}}
  #{{#enable-volume-snapshot}}
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-snapshot-controller-role
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotcontents"]
        verbs: ["create", "get", "list", "watch", "update", "delete"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshots"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshots/status"]
        verbs: ["update"]
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-external-snapshotter-role
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get", "list"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotcontents"]
        verbs: ["create", "get", "list", "watch", "update", "delete"]
      - apiGroups: ["snapshot.storage.k8s.io"]
        resources: ["volumesnapshotcontents/status"]
        verbs: ["update"]
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-csi-snapshot-controller-binding
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-snapshot-controller
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: ebs-snapshot-controller-role
      apiGroup: rbac.authorization.k8s.io
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-csi-snapshotter-binding
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-csi-controller-sa
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: ebs-external-snapshotter-role
      apiGroup: rbac.authorization.k8s.io
  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-snapshot-controller-leaderelection
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    rules:
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["get", "watch", "list", "delete", "update", "create"]
  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: ebs-snapshot-controller-leaderelection
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    subjects:
      - kind: ServiceAccount
        name: ebs-snapshot-controller
        namespace: kube-system
    roleRef:
      kind: Role
      name: ebs-snapshot-controller-leaderelection
      apiGroup: rbac.authorization.k8s.io
  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: ebs-snapshot-controller
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    spec:
      serviceName: ebs-snapshot-controller
      replicas: 1
      selector:
        matchLabels:
          app: ebs-snapshot-controller
          app.kubernetes.io/name: aws-ebs-csi-driver
      template:
        metadata:
          labels:
            app: ebs-snapshot-controller
            app.kubernetes.io/name: aws-ebs-csi-driver
            app.kubernetes.io/version: 0.8.2
        spec:
          serviceAccountName: ebs-snapshot-controller
          containers:
            - name: snapshot-controller
              image: quay.io/k8scsi/snapshot-controller:v2.1.1
              args:
                - --v=5
                - --leader-election=false
  #{{/enable-volume-snapshot}}
  - kind: DaemonSet
    apiVersion: apps/v1
    metadata:
      name: ebs-csi-node
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    spec:
      selector:
        matchLabels:
          app: ebs-csi-node
          app.kubernetes.io/name: aws-ebs-csi-driver
      template:
        metadata:
          labels:
            app: ebs-csi-node
            app.kubernetes.io/name: aws-ebs-csi-driver
            app.kubernetes.io/version: 0.8.2
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: eks.amazonaws.com/compute-type
                    operator: NotIn
                    values:
                    - fargate
          nodeSelector:
            kubernetes.io/os: linux
          hostNetwork: true
          priorityClassName: system-node-critical
          tolerations:
            - operator: Exists
          containers:
            - name: ebs-plugin
              securityContext:
                privileged: true
              image: k8s.gcr.io/provider-aws/aws-ebs-csi-driver:v0.8.1
              args:
                - node
                - --endpoint=$(CSI_ENDPOINT)
                - --logtostderr
                - --v=5
              env:
                - name: CSI_ENDPOINT
                  value: unix:/csi/csi.sock
              volumeMounts:
                - name: kubelet-dir
                  mountPath: /var/data/kubelet
                  mountPropagation: "Bidirectional"
                - name: plugin-dir
                  mountPath: /csi
                - name: device-dir
                  mountPath: /dev
              ports:
                - name: healthz
                  containerPort: 9808
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                timeoutSeconds: 3
                periodSeconds: 10
                failureThreshold: 5
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            - name: node-driver-registrar
              image: quay.io/k8scsi/csi-node-driver-registrar:v1.3.0
              args:
                - --csi-address=$(ADDRESS)
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --v=5
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh", "-c", "rm -rf /registration/ebs.csi.aws.com-reg.sock /csi/csi.sock"]
              env:
                - name: ADDRESS
                  value: /csi/csi.sock
                - name: DRIVER_REG_SOCK_PATH
                  value: /var/data/kubelet/plugins/ebs.csi.aws.com/csi.sock
              volumeMounts:
                - name: plugin-dir
                  mountPath: /csi
                - name: registration-dir
                  mountPath: /registration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            - name: liveness-probe
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              args:
                - --csi-address=/csi/csi.sock
              volumeMounts:
                - name: plugin-dir
                  mountPath: /csi
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
          volumes:
            - name: kubelet-dir
              hostPath:
                path: /var/data/kubelet
                type: Directory
            - name: plugin-dir
              hostPath:
                path: /var/data/kubelet/plugins/ebs.csi.aws.com/
                type: DirectoryOrCreate
            - name: registration-dir
              hostPath:
                path: /var/data/kubelet/plugins_registry/
                type: Directory
            - name: device-dir
              hostPath:
                path: /dev
                type: Directory
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ebs-csi-controller
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
        app.kubernetes.io/version: 0.8.2
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: ebs-csi-controller
          app.kubernetes.io/name: aws-ebs-csi-driver
      template:
        metadata:
          labels:
            app: ebs-csi-controller
            app.kubernetes.io/name: aws-ebs-csi-driver
            app.kubernetes.io/version: 0.8.2
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          serviceAccountName: ebs-csi-controller-sa
          priorityClassName: system-cluster-critical
          tolerations:
            - operator: Exists
          containers:
            - name: ebs-plugin
              image: k8s.gcr.io/provider-aws/aws-ebs-csi-driver:v0.8.1
              imagePullPolicy: IfNotPresent
              args:
                #{{- if ne .Release.Name "kustomize" }}
                - controller
                #{{- else }}
                # - {all,controller,node} # specify the driver mode
                #{{- end }}
                - --endpoint=$(CSI_ENDPOINT)
                #{{#extra-volume-tags?}}
                #- --extra-volume-tags="{{ extra-volume-tags }}"
                #{{/extra-volume-tags?}}
                #{{#k8s-tag-cluster-id?}}
                #- --k8s-tag-cluster-id="{{ k8s-tag-cluster-id }}"
                #{{/k8s-tag-cluster-id?}}
                - --logtostderr
                - --v=5
              env:
                - name: CSI_ENDPOINT
                  value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret
                      key: key_id
                      optional: true
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret
                      key: access_key
                      optional: true
                #{{#aws-region?}}
                #- name: AWS_REGION
                #  value: "{{ aws-region }}"
                #{{/aws-region?}}
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              ports:
                - name: healthz
                  containerPort: 9808
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                timeoutSeconds: 3
                periodSeconds: 10
                failureThreshold: 5
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            - name: csi-provisioner
              image: quay.io/k8scsi/csi-provisioner:v1.6.0
              args:
                - --csi-address=$(ADDRESS)
                - --v=5
                #{{#enable-volume-scheduling}}
                - --feature-gates=Topology=true
                #{{/enable-volume-scheduling}}
                #{{#extra-create-metadata}}
                - --extra-create-metadata
                #{{/extra-create-metadata}}
                - --enable-leader-election
                - --leader-election-type=leases
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            - name: csi-attacher
              image: quay.io/k8scsi/csi-attacher:v2.2.0
              args:
                - --csi-address=$(ADDRESS)
                - --v=5
                - --leader-election=true
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            #{{#enable-volume-snapshot}}
            - name: csi-snapshotter
              image: quay.io/k8scsi/csi-snapshotter:v2.1.1
              args:
                - --csi-address=$(ADDRESS)
                - --leader-election=true
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            #{{/enable-volume-snapshot}}
            #{{#enable-volume-resizing}}
            - name: csi-resizer
              image: quay.io/k8scsi/csi-resizer:v0.5.0
              imagePullPolicy: Always
              args:
                - --csi-address=$(ADDRESS)
                - --v=5
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            #{{/enable-volume-resizing}}
            - name: liveness-probe
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              args:
                - --csi-address=/csi/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /csi
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
          volumes:
            - name: socket-dir
              emptyDir: {}
