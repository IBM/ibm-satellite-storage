---
apiVersion: v1
kind: List
metadata:
  name: aws-efs-csi-driver
  namespace: kube-system
  annotations:
    version: 2.0.3
    revision: 1
items:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: aws-secret
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    data:
      key_id: "{{{ aws-access-key }}}"
      access_key: "{{{ aws-secret-access-key }}}"
  - apiVersion: storage.k8s.io/v1
    kind: CSIDriver
    metadata:
      name: efs.csi.aws.com
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    spec:
      attachRequired: false
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: efs-csi-node
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: efs-csi-controller-sa
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: efs-csi-node-sa
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-external-provisioner-role
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "patch"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["csinodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["get", "watch", "list", "delete", "update", "create"]
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-node-role
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    rules:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch", "patch"]
  - kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-external-provisioner-role-describe-secrets
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    rules:
      - apiGroups: [ "" ]
        resources: [ "secrets" ]
        resourceNames: ["x-account"]
        verbs: [ "get", "watch", "list" ]
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-provisioner-binding
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    subjects:
      - kind: ServiceAccount
        name: efs-csi-controller-sa
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: efs-csi-external-provisioner-role
      apiGroup: rbac.authorization.k8s.io
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-node-binding
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    subjects:
      - kind: ServiceAccount
        name: efs-csi-node-sa
        namespace: default
    roleRef:
      kind: ClusterRole
      name: efs-csi-node-role
      apiGroup: rbac.authorization.k8s.io
  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: efs-csi-provisioner-binding-describe-secrets
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    subjects:
      - kind: ServiceAccount
        name: efs-csi-controller-sa
        namespace: default
    roleRef:
      kind: ClusterRole
      name: efs-csi-external-provisioner-role-describe-secrets
      apiGroup: rbac.authorization.k8s.io
  - kind: DaemonSet
    apiVersion: apps/v1
    metadata:
      name: efs-csi-node
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    spec:
      selector:
        matchLabels:
          app: efs-csi-node
          app.kubernetes.io/name: aws-efs-csi-driver
          app.kubernetes.io/version: 2.0.3
      template:
        metadata:
          labels:
            app: efs-csi-node
            app.kubernetes.io/name: aws-efs-csi-driver
            app.kubernetes.io/version: 2.0.3
          annotations:
            autoUpdate: "AUTO-UPDATE-ENABLED"
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: eks.amazonaws.com/compute-type
                        operator: NotIn
                        values:
                          - fargate
          hostNetwork: true
          dnsPolicy: ClusterFirst
          serviceAccountName: efs-csi-node-sa
          priorityClassName: system-node-critical
          tolerations:
            - operator: Exists
          securityContext:
            fsGroup: 0
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          containers:
            - name: efs-plugin
              securityContext:
                privileged: true
              image: public.ecr.aws/efs-csi-driver/amazon/aws-efs-csi-driver:v2.0.3
              imagePullPolicy: IfNotPresent
              args:
                - --endpoint=$(CSI_ENDPOINT)
                - --logtostderr
                - --v=2
                - --vol-metrics-opt-in=false
                - --vol-metrics-refresh-period=240
                - --vol-metrics-fs-rate-limit=5
              env:
                - name: CSI_ENDPOINT
                  value: unix:/csi/csi.sock
                - name: CSI_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              volumeMounts:
                - name: kubelet-dir
                  mountPath: /var/data/kubelet
                  mountPropagation: "Bidirectional"
                - name: plugin-dir
                  mountPath: /csi
                - name: efs-state-dir
                  mountPath: /var/run/efs
                - name: efs-utils-config
                  mountPath: /var/amazon/efs
                - name: efs-utils-config-legacy
                  mountPath: /etc/amazon/efs-legacy
              ports:
                - name: healthz
                  containerPort: 9809
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                timeoutSeconds: 3
                periodSeconds: 2
                failureThreshold: 5
            - name: cs-driver-registrar
              image: public.ecr.aws/eks-distro/kubernetes-csi/node-driver-registrar:v2.10.0-eks-1-29-7
              imagePullPolicy: IfNotPresent
              args:
                - --csi-address=$(ADDRESS)
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --v=2
              env:
                - name: ADDRESS
                  value: /csi/csi.sock
                - name: DRIVER_REG_SOCK_PATH
                  value: /var/data/kubelet/plugins/efs.csi.aws.com/csi.sock
                - name: KUBE_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              volumeMounts:
                - name: plugin-dir
                  mountPath: /csi
                - name: registration-dir
                  mountPath: /registration
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
            - name: liveness-probe
              image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.12.0-eks-1-29-7
              imagePullPolicy: IfNotPresent
              args:
                - --csi-address=/csi/csi.sock
                - --health-port=9809
                - --v=2
              volumeMounts:
                - name: plugin-dir
                  mountPath: /csi
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
          volumes:
            - name: kubelet-dir
              hostPath:
                path: /var/data/kubelet
                type: Directory
            - name: plugin-dir
              hostPath:
                path: /var/data/kubelet/plugins/efs.csi.aws.com/
                type: DirectoryOrCreate
            - name: registration-dir
              hostPath:
                path: /var/data/kubelet/plugins_registry/
                type: Directory
            - name: efs-state-dir
              hostPath:
                path: /var/run/efs
                type: DirectoryOrCreate
            - name: efs-utils-config
              hostPath:
                path: /var/amazon/efs
                type: DirectoryOrCreate
            - name: efs-utils-config-legacy
              hostPath:
                path: /etc/amazon/efs
                type: DirectoryOrCreate
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: efs-csi-controller
      namespace: kube-system
      labels:
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/version: 2.0.3
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: efs-csi-controller
          app.kubernetes.io/name: aws-efs-csi-driver
          app.kubernetes.io/version: 2.0.3
      template:
        metadata:
          labels:
            app: efs-csi-controller
            app.kubernetes.io/name: aws-efs-csi-driver
            app.kubernetes.io/version: 2.0.3
          annotations:
            autoUpdate: "AUTO-UPDATE-ENABLED"
        spec:
          hostNetwork: true
          nodeSelector:
            kubernetes.io/os: linux
          serviceAccountName: efs-csi-controller-sa
          priorityClassName: system-cluster-critical
          tolerations:
            - key: CriticalAddonsOnly
              operator: Exists
            - key: efs.csi.aws.com/agent-not-ready
              operator: Exists
          securityContext:
            fsGroup: 0
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          dnsPolicy: ClusterFirst
          containers:
            - name: efs-plugin
              securityContext:
                privileged: true
              image: public.ecr.aws/efs-csi-driver/amazon/aws-efs-csi-driver:v2.0.3
              imagePullPolicy: IfNotPresent
              args:
                - --endpoint=$(CSI_ENDPOINT)
                - --logtostderr
                - --v=2
                - --delete-access-point-root-dir=false
              env:
                - name: CSI_ENDPOINT
                  value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
                - name: CSI_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret
                      key: key_id
                      optional: true
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret
                      key: access_key
                      optional: true
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              ports:
                - name: healthz
                  containerPort: 9909
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                timeoutSeconds: 3
                periodSeconds: 10
                failureThreshold: 5
            - name: csi-provisioner
              image: public.ecr.aws/eks-distro/kubernetes-csi/external-provisioner:v4.0.0-eks-1-29-7
              imagePullPolicy: IfNotPresent
              args:
                - --csi-address=$(ADDRESS)
                - --v=2
                - --feature-gates=Topology=true
                - --extra-create-metadata
                - --leader-election
                - --leader-election-renew-deadline=10s
                - --leader-election-lease-duration=15s
              env:
                - name: ADDRESS
                  value: /var/lib/csi/sockets/pluginproxy/csi.sock
              volumeMounts:
                - name: socket-dir
                  mountPath: /var/lib/csi/sockets/pluginproxy/
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
            - name: liveness-probe
              image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.12.0-eks-1-29-7
              imagePullPolicy: IfNotPresent
              args:
                - --csi-address=/csi/csi.sock
                - --health-port=9909
              volumeMounts:
                - name: socket-dir
                  mountPath: /csi
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
          volumes:
            - name: socket-dir
              emptyDir: {}